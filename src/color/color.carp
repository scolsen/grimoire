(load "git@github.com:scolsen/carp-ncurses@master")
(load "colormap.carp")
(load "palette.carp")
(load "compatibility.carp")
(load "../version.carp")

(use NCurses)

(defmodule Grimoire
  (doc Color
    "Represents a color."
    "Each Color corresponds to an ncurses color pair."
    "Grimoire handles initializing and managing color pairs.")
  (deftype Color [id Int fg Int bg Int])

  (def default-color (Color.init 0 0 0))

  (defmodule Color
    (hidden next-identifier) (hidden max-identifier)
    (hidden compatible-pair)

    (hidden init) (hidden set-fg) (hidden set-bg)
    (hidden set-id) (hidden set-fg!) (hidden set-bg!)
    (hidden set-id!) (hidden update-id) (hidden update-fg) (hidden update-bg)

    (defn start []
      (do (ignore (start-color))))

    (doc new "Initializes a new color.")
    (defn new [fg-code bg-code]
      (if (> (inc next-identifier) (max-identifier))
          (Result.Error @"Maximum number of color pairs allocated.")
          (let [ok? (compatible-pair next-identifier fg-code bg-code)]
            (if (= ok? NCurses.OK)
                (let-do [id next-identifier]
                  (set! next-identifier (inc next-identifier))
                  (Result.Success (Grimoire.Color id fg-code bg-code)))
                (Result.Error @"Failed to initialize color.")))))

    (doc or-default
      ("Tries to initialize a color. " false)
      "If it fails, returns the default color.")
    (defn or-default [fg bg]
      (from-success (new fg bg) @&Grimoire.default-color))

    (doc =
      "Returns true if two colors are equal."
      "Equality is only based on the id field.")
    (defn = [color other]
      (= @(Grimoire.Color.id color) @(Grimoire.Color.id other)))
    (implements = =)

    (hidden get-extended)
    (defn get-extended [id]
      (let-do [fg*   (Pointer.unsafe-alloc 0)
               bg*   (Pointer.unsafe-alloc 0)
               color (Grimoire.Color.init id 0 0)]
        (when (= NCurses.OK (extended-pair-content id fg* bg*))
          (do (Grimoire.Color.set-fg! &color (to-value fg*))
              (Grimoire.Color.set-bg! &color (to-value bg*))))
        (Pointer.free fg*)
        (Pointer.free bg*)
        color))

    (hidden get-pair)
    (defn get-pair [id]
      (let-do [fg*   (Pointer.unsafe-alloc (from-int 0))
               bg*   (Pointer.unsafe-alloc (from-int 0))
               color (Grimoire.Color.init id 0 0)]
        (when (= NCurses.OK (pair-content (from-int id) fg* bg*))
          (do (Grimoire.Color.set-fg! &color (to-int (to-value fg*)))
              (Grimoire.Color.set-bg! &color (to-int (to-value bg*)))))
        (Pointer.free fg*)
        (Pointer.free bg*)
        color))

    (doc get
      "Retrieves the color assigned to the given color id."
      ("If a color with the given id hasn't been initialized yet, " false)
      "returns a default color value with foreground and background set to 0.")
    (defn get [id]
      (if extended-colors?
        (get-extended id)
        (get-pair id)))

    (doc from-palette
      "Initializes a new color using color codes from the given palette.")
    (defn from-palette [palette fg-key bg-key]
      (let [fg-code @(Grimoire.Palette.get palette fg-key)
            bg-code @(Grimoire.Palette.get palette bg-key)]
        (new fg-code bg-code)))

    (doc solid "Initializes a solid color.")
    (defn solid [color-code]
      (new color-code color-code))

    (doc solids "Initialize a solid color for each code in a Palette.")
    (defn solids [palette]
      (let-do [result []
               codes (Grimoire.Palette.codes palette)]
        (foreach [code codes]
          (match (solid @code)
                 (Result.Success color) (Array.push-back! &result color)
                 _ ()))
        result))

    (doc set-foreground "Sets the foreground value of a color.")
    (defn set-foreground! [color fg]
      (let [code (compatible-pair @(Grimoire.Color.id &color)
                                  fg
                                  @(Grimoire.Color.bg &color))]
      (if (= code NCurses.OK)
          (Result.Success (set-fg color fg))
          (Result.Error @"Couldn't update foreground."))))

    (doc set-background "Sets the background value of a color.")
    (defn set-background! [color bg]
      (let [code (compatible-pair @(Grimoire.Color.id &color)
                                  @(Grimoire.Color.fg &color)
                                  bg)]
        (if (= code NCurses.OK)
            (Result.Success (set-bg color bg))
            (Result.Error @"Couldn't update background."))))

    (doc update
      ("Updates the foreground and background of a color " false)
      "using the functions f and g, respectively.")
    (defn update [color f g]
      (let [fg (~f @(Grimoire.Color.fg &color))
            bg (~g @(Grimoire.Color.bg &color))
            code (compatible-pair @(Grimoire.Color.id &color)
                                  fg
                                  bg)]
        (if (= code NCurses.OK)
            (Result.Success (set-bg (set-fg color fg) bg))
            (Result.Error @"Couldn't update color."))))

    (defn with-color [attr color]
      (if extended-colors?
          (attr-set attr (from-int 0) (address (Grimoire.Color.id color)))
          (attr-set attr (from-int (color-pair @(Grimoire.Color.id color))) NULL)))

    (defn on [color]
      (with-color A_NORMAL color))

    (defn off []
      (attr-set A_NORMAL (from-int 0) NULL))

    (defn swap-all! [palette f]
      (do (reset-color-pairs)
          (set! next-identifier 1)
          (~f palette)))

    (defn swap! [colors palette f]
      (let-do [last-id next-identifier
               seg-start @(Grimoire.Color.id (Array.unsafe-nth colors 0))]
        (set! next-identifier seg-start)
        (let-do [res (~f palette)]
          (set! next-identifier last-id)
          res)))

    (defn clear-all! []
      (do (reset-color-pairs)
          (set! next-identifier 1)))

    (doc with-color*
      ("Turns on the NCurses color attribute" false)
      ("corresponding to color before executing `forms`. " false)
      "Turns the color off afterwards.")
    (defmacro with-color* [color form]
      (list 'do (list 'ignore (list 'with-color 'A_NORMAL color))
                form
                (list 'ignore (list 'Grimoire.Color.off))))

    (defn + [color other]
      (let [color-fg (ColorMap.to-rgb @(Color.fg &color) ColorMap.xterm)
            color-bg (ColorMap.to-rgb @(Color.bg &color) ColorMap.xterm)
            other-fg (ColorMap.to-rgb @(Color.fg &other) ColorMap.xterm)
            other-bg (ColorMap.to-rgb @(Color.bg &other) ColorMap.xterm)
            blended-fg (+ color-fg other-fg)
            blended-bg (+ color-bg other-bg)]
        (from-success (new (to-256 &blended-fg) (to-256 &blended-bg))
                      @&Grimoire.default-color)))
    (implements + +)
  )
)
